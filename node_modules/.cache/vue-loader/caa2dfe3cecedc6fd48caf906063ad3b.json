{"remainingRequest":"E:\\2023spring\\sci\\vue3-bigData\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!E:\\2023spring\\sci\\vue3-bigData\\src\\views\\homepage\\components\\barChart.vue?vue&type=template&id=cfa7a346","dependencies":[{"path":"E:\\2023spring\\sci\\vue3-bigData\\src\\views\\homepage\\components\\barChart.vue","mtime":1676367231992},{"path":"E:\\2023spring\\sci\\vue3-bigData\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1676359411943},{"path":"E:\\2023spring\\sci\\vue3-bigData\\node_modules\\babel-loader\\lib\\index.js","mtime":1676359413493},{"path":"E:\\2023spring\\sci\\vue3-bigData\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1676359414755},{"path":"E:\\2023spring\\sci\\vue3-bigData\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1676359411943},{"path":"E:\\2023spring\\sci\\vue3-bigData\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1676359413934}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQogIDxkaXYgY2xhc3NOYW1lPSJjaGFydC13cmFwcGVyIiByZWY9ImJhckNoYXJ0Ij48L2Rpdj4NCg=="},{"version":3,"sources":["E:\\2023spring\\sci\\vue3-bigData\\src\\views\\homepage\\components\\barChart.vue"],"names":[],"mappings":";EACE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC","file":"E:/2023spring/sci/vue3-bigData/src/views/homepage/components/barChart.vue","sourceRoot":"","sourcesContent":["<template>\r\n  <div className=\"chart-wrapper\" ref=\"barChart\"></div>\r\n</template>\r\n\r\n<script>\r\nimport echarts from \"echarts\";\r\nimport {onMounted, onBeforeUnmount, ref, watch} from \"vue\";\r\nimport {debounce} from \"@/utils/index.js\";\r\nimport useResize from \"@/componentApi/useResize.js\";\r\nimport {selectOtherData} from \"@/api/mockChart\";\r\n\r\nexport default {\r\n  name: \"barChart\",\r\n  setup() {\r\n    let {abcode, year, parentInfo, routerChange} = useResize();\r\n\r\n    const barChart = ref(null);\r\n    let myChart = ref(null);\r\n\r\n    const resizeHandler = debounce(() => {\r\n      if (myChart) {\r\n        myChart.resize();\r\n      }\r\n    }, 200);\r\n\r\n    onMounted(() => {\r\n      getChartData();\r\n      window.addEventListener(\"resize\", resizeHandler);\r\n    });\r\n    onBeforeUnmount(() => {\r\n      window.removeEventListener(\"resize\", resizeHandler);\r\n    });\r\n\r\n    //模拟接口，获取echarts数据\r\n    const getChartData = async () => {\r\n      const {data} = await selectOtherData({\r\n        abcode,\r\n        year,\r\n      });\r\n      initEcharts(data);\r\n    };\r\n\r\n    //渲染echarts图\r\n    const initEcharts = (data) => {\r\n      myChart = echarts.init(barChart.value);\r\n      let option = {\r\n        //  backgroundColor: '#00265f',\r\n        tooltip: {\r\n          trigger: 'axis',\r\n          axisPointer: {\r\n            type: 'shadow'\r\n          }\r\n        },\r\n        grid: {\r\n          left: '0%',\r\n          top:'10px',\r\n          right: '0%',\r\n          bottom: '4%',\r\n          containLabel: true\r\n        },\r\n        xAxis: [{\r\n          type: 'category',\r\n          data: ['芯片', '液晶屏', '快消食品', '烟酒', '其他'],\r\n          axisLine: {\r\n            show: true,\r\n            lineStyle: {\r\n              color: \"#00a9fb\",\r\n              width: 1,\r\n              type: \"solid\"\r\n            },\r\n          },\r\n\r\n          axisTick: {\r\n            show: false\r\n          },\r\n          axisLabel:  {\r\n            interval: 0,\r\n            // rotate:50,\r\n            show: true,\r\n            splitNumber: 15,\r\n            textStyle: {\r\n              color: \"#cecece\",\r\n              fontSize: '12',\r\n            },\r\n          },\r\n        }],\r\n        yAxis: [{\r\n          type: 'value',\r\n          axisLabel: {\r\n            //formatter: '{value} %'\r\n            show:true,\r\n            textStyle: {\r\n              color: \"#cecece\",\r\n              fontSize: '12',\r\n            },\r\n          },\r\n          axisTick: {\r\n            show: false,\r\n          },\r\n          axisLine: {\r\n            show: true,\r\n            lineStyle: {\r\n              color: \"#397cbc\",\r\n              width: 1,\r\n              type: \"solid\"\r\n            },\r\n          },\r\n          splitLine: {\r\n            lineStyle: {\r\n              color: \"#f0f\",\r\n            }\r\n          }\r\n        }],\r\n        series: [\r\n          {\r\n            type: 'bar',\r\n            data: [\r\n              ('湖北', 300),\r\n              ('广东', 250),\r\n              ('浙江', 200),\r\n              ('河南', 150),\r\n              ('湖南', 100)\r\n            ],\r\n            barWidth:'35%', //柱子宽度\r\n            // barGap: 1, //柱子之间间距\r\n            itemStyle: {\r\n              normal: {\r\n                color:'#1990DA',\r\n                opacity: 1,\r\n                barBorderRadius: 5,\r\n              }\r\n            }\r\n          }\r\n\r\n        ]\r\n      };\r\n      myChart.setOption(option);\r\n      myChart.off(\"click\");\r\n      myChart.getZr().off(\"click\");\r\n      myChart.getZr().on(\"click\", (params) => {\r\n        const pointInPixel = [params.offsetX, params.offsetY];\r\n        if (myChart.containPixel(\"grid\", pointInPixel) || data.length === 0) {\r\n          routerChange(\"/more\");\r\n        }\r\n      });\r\n    };\r\n\r\n    watch(\r\n        year,\r\n        (nl, ol) => {\r\n          getChartData();\r\n        },\r\n        {lazy: false}\r\n    );\r\n\r\n    watch(\r\n        parentInfo,\r\n        (nl, ol) => {\r\n          getChartData();\r\n        },\r\n        {lazy: false, deep: true}\r\n    );\r\n\r\n    return {\r\n      barChart,\r\n    };\r\n  },\r\n};\r\n</script>\r\n"]}]}