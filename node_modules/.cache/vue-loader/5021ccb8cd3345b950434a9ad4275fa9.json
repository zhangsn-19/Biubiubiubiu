{"remainingRequest":"E:\\2023spring\\sci\\vue3-bigData\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!E:\\2023spring\\sci\\vue3-bigData\\src\\views\\homepage\\components\\lineChart.vue?vue&type=template&id=007d8b68","dependencies":[{"path":"E:\\2023spring\\sci\\vue3-bigData\\src\\views\\homepage\\components\\lineChart.vue","mtime":1676359297068},{"path":"E:\\2023spring\\sci\\vue3-bigData\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1676359411943},{"path":"E:\\2023spring\\sci\\vue3-bigData\\node_modules\\babel-loader\\lib\\index.js","mtime":1676359413493},{"path":"E:\\2023spring\\sci\\vue3-bigData\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1676359414755},{"path":"E:\\2023spring\\sci\\vue3-bigData\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1676359411943},{"path":"E:\\2023spring\\sci\\vue3-bigData\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1676359413934}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQogIDxkaXYgY2xhc3M9ImNoYXJ0LXdyYXBwZXIiIHJlZj0ibGluZUNoYXJ0Ij48L2Rpdj4NCg=="},{"version":3,"sources":["E:\\2023spring\\sci\\vue3-bigData\\src\\views\\homepage\\components\\lineChart.vue"],"names":[],"mappings":";EACE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC","file":"E:/2023spring/sci/vue3-bigData/src/views/homepage/components/lineChart.vue","sourceRoot":"","sourcesContent":["<template>\r\n  <div class=\"chart-wrapper\" ref=\"lineChart\"></div>\r\n</template>\r\n\r\n<script>\r\nimport echarts from \"echarts\";\r\nimport { onMounted, onBeforeUnmount, ref, watch } from \"vue\";\r\nimport { debounce } from \"@/utils/index.js\";\r\nimport useResize from \"@/componentApi/useResize.js\";\r\nimport { selectOtherData } from \"@/api/mockChart\";\r\n\r\nexport default {\r\n  name: \"lineChart\",\r\n  setup() {\r\n    let { abcode, year, parentInfo, routerChange } = useResize();\r\n\r\n    const lineChart = ref(null);\r\n    let myChart = ref(null);\r\n\r\n    const resizeHandler = debounce(() => {\r\n      if (myChart) {\r\n        myChart.resize();\r\n      }\r\n    }, 200);\r\n\r\n    onMounted(() => {\r\n      getChartData();\r\n      window.addEventListener(\"resize\", resizeHandler);\r\n    });\r\n    onBeforeUnmount(() => {\r\n      window.removeEventListener(\"resize\", resizeHandler);\r\n    });\r\n\r\n    //模拟接口，获取echarts数据\r\n    const getChartData = async () => {\r\n      const { data } = await selectOtherData({\r\n        abcode,\r\n        year,\r\n      });\r\n      initEcharts(data);\r\n    };\r\n\r\n    //渲染echarts图\r\n    const initEcharts = (data) => {\r\n      myChart = echarts.init(lineChart.value);\r\n      myChart.setOption(\r\n        {\r\n          grid: {\r\n            left: \"13%\",\r\n            right: \"8%\",\r\n            bottom: \"20%\",\r\n            top: \"19%\",\r\n          },\r\n          title: {\r\n            show: data.length === 0,\r\n            top: \"center\",\r\n            left: \"center\",\r\n            text: \"暂无数据\",\r\n            textStyle: {\r\n              color: \"rgb(179, 239, 255)\",\r\n              fontSize: 12,\r\n            },\r\n          },\r\n          tooltip: {\r\n            trigger: \"axis\",\r\n            axisPointer: {\r\n              type: \"line\",\r\n            },\r\n          },\r\n          toolbox: {\r\n            feature: {\r\n              dataView: {\r\n                show: false,\r\n              },\r\n              magicType: {\r\n                show: true,\r\n                type: [\"line\", \"bar\"],\r\n              },\r\n              restore: {\r\n                show: false,\r\n              },\r\n              saveAsImage: {\r\n                show: true,\r\n                name: year.value + \"同行业销售额对比\",\r\n                pixelRatio: 2,\r\n              },\r\n            },\r\n            iconStyle: {\r\n              normal: {\r\n                borderColor: \"#1990DA\",\r\n              },\r\n            },\r\n            top: 0,\r\n            right: 5,\r\n          },\r\n          dataZoom: [\r\n            {\r\n              type: \"inside\",\r\n              startValue: 0,\r\n              endValue: 12,\r\n            },\r\n          ],\r\n          legend: {\r\n            show: true,\r\n            left: \"15\",\r\n            top: \"0\",\r\n            itemWidth: 15,\r\n            itemHeight: 11,\r\n            textStyle: {\r\n              color: \"#00a9fb\",\r\n            },\r\n          },\r\n          xAxis: {\r\n            type: \"category\",\r\n            axisLine: {\r\n              lineStyle: {\r\n                color: \"#397cbc\",\r\n              },\r\n            },\r\n            splitLine: {\r\n              show: false,\r\n            },\r\n            axisTick: {\r\n              show: false,\r\n            },\r\n            axisLabel: {\r\n              show: true,\r\n              textStyle: {\r\n                color: \"#cecece\",\r\n                fontSize: 12,\r\n              },\r\n              rotate: 15,\r\n            },\r\n            data: data.map((item) => item.name),\r\n          },\r\n          yAxis: [\r\n            {\r\n              type: \"value\",\r\n              axisTick: {\r\n                show: false,\r\n              },\r\n              axisLabel: {\r\n                textStyle: {\r\n                  fontSize: 12,\r\n                  color: \"#cecece\",\r\n                },\r\n              },\r\n              axisLine: {\r\n                lineStyle: {\r\n                  color: \"#397cbc\",\r\n                },\r\n              },\r\n              //网格线\r\n              splitLine: {\r\n                lineStyle: {\r\n                  color: \"#11366e\",\r\n                },\r\n              },\r\n            },\r\n          ],\r\n          series: [\r\n            {\r\n              name: \"本公司\",\r\n              type: \"line\",\r\n              data: data.map((item) => item.value),\r\n              smooth: true,\r\n              showSymbol: false,\r\n              barWidth: \"10\",\r\n              barGap: \"-100%\",\r\n              itemStyle: {\r\n                color: \"#0F84CC\",\r\n              },\r\n              lineStyle: {\r\n                normal: {\r\n                  width: 2,\r\n                  color: \"#0F84CC\", // 线条颜色\r\n                },\r\n                borderColor: \"#f0f\",\r\n              },\r\n              areaStyle: {\r\n                normal: {\r\n                  color: \"#0F84CC\",\r\n                  shadowColor: \"rgba(53,142,215, 0.9)\", //阴影颜色\r\n                  shadowBlur: 20,\r\n                },\r\n              },\r\n            },\r\n            {\r\n              name: \"同行业公司\",\r\n              type: \"line\",\r\n              barWidth: \"10\",\r\n              barGap: \"-100%\",\r\n              data: data.map((item) => item.other),\r\n              smooth: true, //是否平滑曲线显示\r\n              showSymbol: false,\r\n              itemStyle: {\r\n                color: \"#05D9E4\",\r\n              },\r\n              lineStyle: {\r\n                normal: {\r\n                  width: 2,\r\n                  color: \"#05D9E4\", // 线条颜色\r\n                },\r\n                borderColor: \"#f0f\",\r\n              },\r\n              areaStyle: {\r\n                normal: {\r\n                  color: \"#05D9E4\",\r\n                  shadowColor: \"rgba(53,142,215, 0.9)\", //阴影颜色\r\n                  shadowBlur: 20,\r\n                },\r\n              },\r\n            },\r\n          ],\r\n        },\r\n        true\r\n      );\r\n      myChart.off(\"click\");\r\n      myChart.getZr().off(\"click\");\r\n      myChart.getZr().on(\"click\", (params) => {\r\n        const pointInPixel = [params.offsetX, params.offsetY];\r\n        if (myChart.containPixel(\"grid\", pointInPixel) || data.length === 0) {\r\n          routerChange(\"/more\");\r\n        }\r\n      });\r\n    };\r\n\r\n    watch(\r\n      year,\r\n      (nl, ol) => {\r\n        getChartData();\r\n      },\r\n      { lazy: false }\r\n    );\r\n\r\n    watch(\r\n      parentInfo,\r\n      (nl, ol) => {\r\n        getChartData();\r\n      },\r\n      { lazy: false, deep: true }\r\n    );\r\n\r\n    return {\r\n      lineChart,\r\n    };\r\n  },\r\n};\r\n</script>\r\n"]}]}