{"remainingRequest":"E:\\2023spring\\sci\\vue3-bigData\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!E:\\2023spring\\sci\\vue3-bigData\\src\\views\\homepage\\components\\typeCount.vue?vue&type=template&id=0bcaf393","dependencies":[{"path":"E:\\2023spring\\sci\\vue3-bigData\\src\\views\\homepage\\components\\typeCount.vue","mtime":1676359297068},{"path":"E:\\2023spring\\sci\\vue3-bigData\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1676359411943},{"path":"E:\\2023spring\\sci\\vue3-bigData\\node_modules\\babel-loader\\lib\\index.js","mtime":1676359413493},{"path":"E:\\2023spring\\sci\\vue3-bigData\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1676359414755},{"path":"E:\\2023spring\\sci\\vue3-bigData\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1676359411943},{"path":"E:\\2023spring\\sci\\vue3-bigData\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1676359413934}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQogIDxkaXYgY2xhc3M9ImNoYXJ0LXdyYXBwZXIiIHJlZj0idHlwZUNvdW50Ij48L2Rpdj4NCg=="},{"version":3,"sources":["E:\\2023spring\\sci\\vue3-bigData\\src\\views\\homepage\\components\\typeCount.vue"],"names":[],"mappings":";EACE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC","file":"E:/2023spring/sci/vue3-bigData/src/views/homepage/components/typeCount.vue","sourceRoot":"","sourcesContent":["<template>\r\n  <div class=\"chart-wrapper\" ref=\"typeCount\"></div>\r\n</template>\r\n\r\n<script>\r\nimport echarts from \"echarts\";\r\nimport { onMounted, onBeforeUnmount, ref, watch } from \"vue\";\r\nimport { debounce } from \"@/utils/index.js\";\r\nimport useResize from \"@/componentApi/useResize.js\";\r\nimport { selectTypeData } from \"@/api/mockChart\";\r\n\r\nexport default {\r\n  name: \"typeCount\",\r\n  setup() {\r\n    let { abcode, year, parentInfo, routerChange } = useResize();\r\n\r\n    const typeCount = ref(null);\r\n    let myChart = ref(null);\r\n\r\n    const resizeHandler = debounce(() => {\r\n      if (myChart) {\r\n        myChart.resize();\r\n      }\r\n    }, 200);\r\n\r\n    onMounted(() => {\r\n      getPieData();\r\n      window.addEventListener(\"resize\", resizeHandler);\r\n    });\r\n    onBeforeUnmount(() => {\r\n      window.removeEventListener(\"resize\", resizeHandler);\r\n    });\r\n\r\n    //模拟接口，获取echarts数据\r\n    const getPieData = async () => {\r\n      const { data } = await selectTypeData({\r\n        abcode,\r\n        year,\r\n      });\r\n      let sum = data.reduce((t, c) => parseFloat(c.value) + t, 0);\r\n      sum = parseFloat(sum.toFixed(2));\r\n      initEcharts(data, sum);\r\n    };\r\n\r\n    // //渲染echarts图\r\n    const initEcharts = (data, sum) => {\r\n      const colorList = [\r\n        \"#0278E6\",\r\n        \"#6255FE\",\r\n        \"#00C6FF\",\r\n        \"#F0960E\",\r\n        \"#34D160\",\r\n        \"#87cefa\",\r\n        \"#da70d6\",\r\n        \"#32cd32\",\r\n        \"#6495ed\",\r\n        \"#9fe6b8\",\r\n        \"#e7bcf3\",\r\n        \"#0E7CE2\",\r\n        \"#FF8352\",\r\n        \"#E271DE\",\r\n        \"#4AEAB0\",\r\n      ];\r\n\r\n      myChart = echarts.init(typeCount.value);\r\n      myChart.setOption(\r\n        {\r\n          color: colorList,\r\n          title: [\r\n            {\r\n              show: data.length === 0,\r\n              top: \"center\",\r\n              left: \"center\",\r\n              text: \"暂无数据\",\r\n              textStyle: {\r\n                color: \"rgb(179, 239, 255)\",\r\n                fontSize: 12,\r\n              },\r\n            },\r\n            {\r\n              text: sum,\r\n              left: \"33%\",\r\n              top: \"center\",\r\n              textStyle: {\r\n                fontSize: 12,\r\n                color: \"rgb(179, 239, 255)\",\r\n              },\r\n            },\r\n          ],\r\n          tooltip: {\r\n            trigger: \"item\",\r\n            formatter: \"销量 <br/>{b} : {c} ({d}%)\",\r\n            textStyle: {\r\n              fontSize: 12,\r\n            },\r\n          },\r\n          legend: {\r\n            orient: \"vertical\",\r\n            top: \"center\",\r\n            type: \"scroll\",\r\n            right: \"7%\",\r\n            itemWidth: 15,\r\n            itemHeight: 13,\r\n            pageIconColor: \"#fff\",\r\n            pageIconSize: 10,\r\n            pageTextStyle: {\r\n              color: \"#fff\",\r\n            },\r\n            data: data.map((item, index) => {\r\n              return {\r\n                name: item.name,\r\n                textStyle: {\r\n                  color: colorList[index],\r\n                },\r\n              };\r\n            }),\r\n          },\r\n          toolbox: {\r\n            feature: {\r\n              dataView: {\r\n                show: false,\r\n              },\r\n              magicType: {\r\n                show: false,\r\n              },\r\n              restore: {\r\n                show: false,\r\n              },\r\n              saveAsImage: {\r\n                show: true,\r\n                name: year.value + \"年销售种类\",\r\n                pixelRatio: 2,\r\n              },\r\n            },\r\n            iconStyle: {\r\n              normal: {\r\n                borderColor: \"#1990DA\",\r\n              },\r\n            },\r\n            top: 0,\r\n            right: 5,\r\n          },\r\n          series: [\r\n            {\r\n              name: \"销售种类\",\r\n              type: \"pie\",\r\n              radius: [\"45%\", \"75%\"],\r\n              center: [\"40%\", \"50%\"],\r\n              roseType: \"radius\",\r\n              data: data,\r\n              labelLine: {\r\n                normal: {\r\n                  length: 0.000000001,\r\n                },\r\n              },\r\n              itemStyle: {\r\n                normal: {\r\n                  color: function(params) {\r\n                    return colorList[params.dataIndex % colorList.length];\r\n                  },\r\n                  label: {\r\n                    show: true,\r\n                    formatter: \"{d}%\",\r\n                  },\r\n                },\r\n              },\r\n            },\r\n          ],\r\n        },\r\n        true\r\n      );\r\n\r\n      myChart.getZr().off(\"click\");\r\n      myChart.getZr().on(\"click\", (params) => {\r\n        const pointInPixel = [params.offsetX, params.offsetY];\r\n        if (myChart.containPixel(\"series\", pointInPixel) || data.length === 0) {\r\n          routerChange(\"/more\");\r\n        }\r\n      });\r\n    };\r\n\r\n    watch(\r\n      year,\r\n      (nl, ol) => {\r\n        getPieData();\r\n      },\r\n      { lazy: false }\r\n    );\r\n    watch(\r\n      parentInfo,\r\n      (nl, ol) => {\r\n        getPieData();\r\n      },\r\n      { lazy: false, deep: true }\r\n    );\r\n\r\n    return {\r\n      typeCount,\r\n    };\r\n  },\r\n};\r\n</script>\r\n"]}]}